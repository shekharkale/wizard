{
  "name": "grunt-jsmeter",
  "version": "0.2.9",
  "description": "Grunt plugin to run jsmeter to get metrics out of the code quality",
  "main": "Gruntfile.js",
  "directories": {
    "test": "test"
  },
  "dependencies": {
    "grunt-init": "~0.2.1",
    "handlebars": "1.1.2"
  },
  "devDependencies": {
    "grunt-contrib-jasmine": "~0.5.2",
    "grunt-contrib-jshint": "~0.6.4",
    "grunt-contrib-clean": "~0.5.0",
    "grunt-contrib-handlebars": "0.6.0",
    "grunt-jsbeautifier": "~0.2.2",
    "jasmine-node": "~1.11.0",
    "grunt-jasmine-node": "~0.1.0",
    "grunt-jasmine-node-coverage": "~0.1.6",
    "grunt": "~0.4.0",
    "grunt-cli": "~0.1.9"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/joseph-jja/grunt-jsmeter.git"
  },
  "author": {
    "name": "Joe Acosta"
  },
  "license": "GPL",
  "bugs": {
    "url": "https://github.com/joseph-jja/grunt-jsmeter/issues"
  },
  "readme": "# grunt-jsmeter\n\n> Grunt plugin to run jsmeter to get metrics out of the code quality ( jsmeter can be found https://code.google.com/p/jsmeter/ ).  This is a grunt plugin to enable generating reports out of the jsmeter npm module.\n\n## Getting Started\nThis plugin requires Grunt `~0.4.1`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-jsmeter --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-jsmeter');\n```\n\n## The \"jsmeter\" task\n\n### Overview\nIn your project's Gruntfile, add a section named `jsmeter` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  jsmeter: {\n    options: {\n      // Task-specific options go here.\n    },\n  },\n})\n```\n\n### Files \n\n#### files.src\nType: `Array`\nDefault value: `[]`\n\nAn array of files.\n\n### Options \n\n#### options.dest\nType: `String`\nDefault value: `'log'`\n\nA string value that is used to identify the location output.  \nThe default is log, but if the console render is used then this does nothing.\n\n#### options.engine\nType: `String`\nDefault value: `'console'`\n\nA string value that is used to identify the engine to render the output.  \nThe default is console.  Alternative renders available are LogRender.\n\n#### options.template\nType: `String`\nDefault value: `'none'`\n\nA string value that is used to identify the handlebars template that should be used\nto render each page. The default template is templates/page.hbs.\n\n#### options.indexTemplate\nType: `String`\nDefault value: `'none'`\n\nA string value that is used to identify the handlebars template that should be used\nto render each page. The default template is templates/index.hbs.\n\n### Usage Examples\n\n#### Default Options\nIn this example, the default options are used to do something with whatever. \nSo if the `testing` file has the content `Testing` and the `123` file had the content `1 2 3`, the generated result would be `Testing, 1 2 3.`\n\n```js\ngrunt.initConfig({\n  jsmeter: {\n    files: {\n      src: ['src/testing', 'src/123'],\n    },\n  },\n})\n```\n\n#### Custom Options\nIn this example, custom options are used to do something else with whatever else. So if the `testing` file has the content `Testing` and the `123` file had the content `1 2 3`, the generated result in this case would be `Testing: 1 2 3 !!!`\n\n```js\ngrunt.initConfig({\n  jsmeter: {\n    files: {\n      src: ['src/testing', 'src/123'],\n    },\n    options: {\n      dest: 'logs',\n      engine: 'LogRender',\n    },\n  },\n})\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. \nThis project uses jshint and jasmine node tests.\nAdd unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n_(Nothing yet)_\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/joseph-jja/grunt-jsmeter",
  "_id": "grunt-jsmeter@0.2.9",
  "dist": {
    "shasum": "aa862ada55f56c9791ac3a106fcdec98a8703886"
  },
  "_from": "grunt-jsmeter@~0.2.7",
  "_resolved": "https://registry.npmjs.org/grunt-jsmeter/-/grunt-jsmeter-0.2.9.tgz"
}
