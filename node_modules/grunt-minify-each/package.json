{
  "name": "grunt-minify-each",
  "version": "0.1.4",
  "description": "Grunt plugin to minify individual files, so that unminified and minified files can be used in an environment",
  "main": "Gruntfile.js",
  "directories": {
    "test": "test"
  },
  "dependencies": {
    "grunt-init": "~0.2.1",
    "node-minify": "~0.9.1"
  },
  "devDependencies": {
    "grunt-contrib-jasmine": "~0.5.2",
    "grunt-contrib-jshint": "~0.6.4",
    "grunt-contrib-clean": "~0.5.0",
    "grunt-jsbeautifier": "~0.2.2",
    "jasmine-node": "~1.11.0",
    "grunt-jasmine-node": "~0.1.0",
    "grunt-jasmine-node-coverage": "~0.1.6",
    "grunt": "~0.4.0",
    "grunt-cli": "~0.1.9"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/joseph-jja/grunt-minify-each.git"
  },
  "author": {
    "name": "Joe Acosta"
  },
  "license": "GPL",
  "bugs": {
    "url": "https://github.com/joseph-jja/grunt-minify-each/issues"
  },
  "readme": "# grunt-minify-each\n\n> A grunt plugin to provide a minified version of each file in a source repo\n\n## Getting Started\nThis plugin requires Grunt `~0.4.1`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-minify-each --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-minify-each');\n```\n\n## The \"minify_each\" task\n\n### Overview\nIn your project's Gruntfile, add a section named `minify_each` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  minify_each: {\n    \tdest: 'build',\n        minDest: '',\n        sourceFilter: /^src\\//,\n        type: 'uglifyjs',\n        parameters: ['--max-line-len=10000', '--lift-vars', '-m']\n    },\n    your_target: {\n      // Target-specific file lists and/or options go here.\n    },\n  },\n})\n```\n\n### Options\n\n#### options.dest\nType: `String`\nDefault value: `build`\n\nThe build directory of where the files should be output to.\n\n#### options.sourceFilter\nType: `String`\nDefault value: /^src\\//\n\nIf set then it is a filter that is applied to a source file.\n\n#### options.minDest\nType: `String`\nDefault value: ``\n\nIf set to a directory location it will create the minified files in that location. This can be useful when using require as you can change baseUrl in require to switch between minified files and none minified files.\n\n#### options.type\nType: `String`\nDefault value: `uglifyjs`\n\nThe minify engine to use, see node-minify for the options.\n\n#### options.dest\nType: `Array`\nDefault value: `['--max-line-len=10000', '--lift-vars', '-m']`\n\nOptions to pass to the minification engine\n\n### Usage Examples\n\n#### Default Options\nIn this example, the default options are used to do something with whatever. So if the `testing` file has the content `Testing` and the `123` file had the content `1 2 3`, the generated result would be `Testing, 1 2 3.`\n\n```js\ngrunt.initConfig({\n  minify_each: {\n    options: {},\n    files: {\n      'dest/default_options': ['src/testing', 'src/123'],\n    },\n  },\n})\n```\n\n#### Custom Options\nIn this example, custom options are used to do something else with whatever else. So if the `testing` file has the content `Testing` and the `123` file had the content `1 2 3`, the generated result in this case would be `Testing: 1 2 3 !!!`\n\n```js\ngrunt.initConfig({\n  minify_each: {\n    options: {\n      dest: 'build',\n        type: 'uglifyjs',\n        parameters: ['--max-line-len=10000', '--lift-vars', '-m']\n    },\n    files: {\n      'dest/default_options': ['src/testing', 'src/123'],\n    },\n  },\n})\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n_(Nothing yet)_\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/joseph-jja/grunt-minify-each",
  "_id": "grunt-minify-each@0.1.4",
  "_from": "grunt-minify-each@~0.1.1"
}
